ggplot(data, aes(x=1, y=diff)) + geom_boxplot()
boxplot(diff)
par(mfrow=c(1,2))
boxplot(diff)
ggplot(data, aes(x=1, y=diff)) + geom_boxplot()
par(mfrow=c(1,2))
boxplot(diff)
ggplot(data, aes(x=1, y=diff)) + geom_boxplot()
boxplot(diff)
ggplot(data, aes(x=1, y=diff)) + geom_boxplot()
boxplot(diff)
ggplot(data, aes(x=1, y=diff)) + geom_boxplot()
mean_diff <- mean(diff)
mean_diff
sd_diff <- sd(diff)
sd_diff
t_stat <- mean_diff/(sd_diff/sqrt(length(diff)))
t_stat
t.test(Before, After, alternative=c("two.sided"), paired=TRUE, conf.level=0.95)
t.test(Before, After, alternative=c("greater"), paired=TRUE, conf.level=0.95)
library(faraway)
### 라이브러리 불러오기
* 패키지가 없다고 뜨면 install.packages()를이용하여 설치를 진행
install.packages("faraway")
```{r cars}
library(faraway)
```
library(faraway)
search()
data(pima, package="faraway")
data(pima, package="faraway")
pima$test <- factor(pima$test)
dim(pima)
head(pima)
str(pima)
* 데이터의 확인 내용을 간단하게 Notepad에 적어보자.
pima?
### pima
*
* 데이터의 확인 내용을 간단하게 Notepad에 적어보자.
?pima
### pima
*
m <- glm(test ~ pregnant + glucose + bmi, family=binomial, data=train)
# 샘플 5:5
idx <- sample(NROW(pima)/2)
# 데이터 셋 나누기
train <- pima[idx, ]
test <- pima[-idx, ]
m <- glm(test ~ pregnant + glucose + bmi, family=binomial, data=train)
m
summary(m)
pred <- predict(m , newdata = test , type = "response")
pred
library(pscl)
### 라이브러리 불러오기
* 패키지가 없다고 뜨면 install.packages()를이용하여 설치를 진행
* install.packages("faraway")
install.packages("pscl")
```{r cars}
library(faraway)
search()
```
library(pscl)
search()
library(pscl)
pR2(model)
library(pscl)
pR2(m)
pred <- predict(m , newdata = test , type = "response")
pred[0:10]
pred <- predict(m , newdata = test , type = "response")
pred[0:10]  # 10개만 보기
# 0 또는 1로 해야 하므로 0.5를 기준으로 TRUE(1), FALSE(0)로 나눈다.
pred <- as.integer(pred > 0.5)
pred[0:10]  # 10개만 보기
actual <- test[ , "test"]
xt = xtabs( ~ pred + actual)
xt
# 확률로 분할표 보기
prop.table(xt)
# caret 패키지를 이용한 정확도 및 기타 확인
library(caret)
pred <- as.factor(pred)
confusionMatrix(pred, actual)
library(faraway)
library(caret)
search()
# caret 패키지를 이용한 정확도 및 기타 확인
# library(caret)
pred <- as.factor(pred)
confusionMatrix(pred, actual)
library(ROCR)
library(ROCR)
pred_prob <- predict(m , newdata = test , type = "response")  # 확률 값
pred_prob
str(pred_prob)
str(test)
# ROC 커브를 위한 pima의 test 변수을 labels로 지정
labels <- test[  ,"test"]
pred3 <- prediction(pred_prob , labels)
plot(performance(pred3 , "tpr" , "fpr"))
# AUC 값 확인
performance(pred3, "auc")
plot(performance(pred3 , "tpr" , "fpr"))
library(ROCR)
pred_prob <- predict(m , newdata = test , type = "response")  # 확률 값
str(test)
# ROC 커브를 위한 pima의 test 변수을 labels로 지정
labels <- test[  ,"test"]
pred3 <- prediction(pred_prob , labels)
plot(performance(pred3 , "tpr" , "fpr"))
# AUC 값 확인(1의 값에 가까울 수록 좋다.)
performance(pred3, "auc")
kor <- c(50,70,80,90,100)
eng <- c(77,88,99,100,70)
math <- c(55, 75, 85, 95, 105)
all_score <- data.frame(kor, eng, math)
all_score
model <- lm(math~kor, data=all_score)
model
summary(model)
model <- lm(math~kor+eng, data=all_score)
model
model1 <- lm(math~kor, data=all_score)
model1
model2 <- lm(math~kor+eng, data=all_score)
model2
# 하나의 변수로 이용한 예측
dat <- data.frame(c(80,85))
pred1
# 하나의 변수로 이용한 예측
dat <- data.frame(c(80,85))
pred1 <- predict(model1, newdata=dat)
pred1 <- predict(model1, newdata=dat)
pred1
pred1
# 하나의 변수로 이용한 예측
dat <- data.frame(c(80,85))
pred1 <- predict(model1, newdata=dat)
# 하나의 변수로 이용한 예측
dat <- data.frame(kor=c(80,85))
pred1 <- predict(model1, newdata=dat)
pred1
# 두개의 변수로 이용한 예측
dat <- data.frame(kor=c(80,85), c(50,60))
pred1 <- predict(model2, newdata=dat)
# 두개의 변수로 이용한 예측
dat <- data.frame(kor=c(80,85), eng=c(50,60))
pred2 <- predict(model2, newdata=dat)
pred2
# 하나의 변수로 이용한 예측
dat <- data.frame(kor=c(80,85))
pred1 <- predict(model1, newdata=dat)
pred1
# 두개의 변수로 이용한 예측
dat <- data.frame(kor=c(80,85), eng=c(50,60))
pred2 <- predict(model2, newdata=dat)
pred2
summary(model1)
summary(model2)
summary(model1)
summary(model2)
summary(model1)
summary(model1)
summary(model2)
kor <- c(50,70,80,90,100)
eng <- c(77,88,99,100,70)
math <- c(55, 75, 85, 95, 105)
all_score <- data.frame(kor, eng, math)
all_score
model1 <- lm(math~kor, data=all_score)
model1
summary(model1)
model2 <- lm(math~kor+eng, data=all_score)
model2
# 하나의 변수로 이용한 예측
dat <- data.frame(kor=c(80,85))
pred1 <- predict(model1, newdata=dat)
pred1
# 두개의 변수로 이용한 예측
dat <- data.frame(kor=c(80,85), eng=c(50,60))
pred2 <- predict(model2, newdata=dat)
pred2
summary(model1)
summary(model2)
source('~/GitHub/RBasic/R_STAT_ANALYSIS/R_ML_ANA_Practice02.r', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/RBasic/R_STAT_ANALYSIS/R_ML_ANA_Practice02.r', encoding = 'UTF-8', echo=TRUE)
setwd("D:\\dataset\\Bike")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
dim(train); dim(test)
install.packages("Amelia")
library(Amelia)
missmap(train)
missmap(test)
## 모델 생성
pair(train)
## 모델 생성
pairplot(train)
## 모델 생성
str(train)
pairs(train[, 2:9], col=train$season)
pairs(train[, 2:9], col=train$season)
pairs(train[, 2:9])
train
str(train)
## 모델 생성
model <- lm(count~temp+humidity, data=train)
model
## 예측
pred <- predict(model, newdata=test)
pred
kor <- c(50,70,80,90,100)
eng <- c(77,88,99,100,70)
math <- c(55, 75, 85, 95, 105)
all_score <- data.frame(kor, eng, math)
all_score
model1 <- lm(math~kor, data=all_score)
model1
model2 <- lm(math~kor+eng, data=all_score)
model2
# 하나의 변수로 이용한 예측
dat <- data.frame(kor=c(80,85))
pred1 <- predict(model1, newdata=dat)
pred1
# 두개의 변수로 이용한 예측
dat <- data.frame(kor=c(80,85), eng=c(50,60))
pred2 <- predict(model2, newdata=dat)
pred2
summary(model1)
summary(model2)
train <-  read.csv("./R_Data/titanic_train.csv")
test <- read.csv("./R_Data/titanic_test.csv")
sub <- read.csv("./R_Data/sample_submission.csv")
dim(train); dim(test); dim(sub)
names(train)
names(test)
names(sub)
names(train)
names(test)
names(sub)
names(train)
print()
print()
print("\n")
print("\n")
names(train)
cat("\n")
names(test)
cat("\n")
names(sub)
library(Amelia)
# library(Amelia)
missmap(train)
missmap(test)
sum(is.na(train))
sum(is.na(test))
str(train)
train <-  read.csv("./R_Data/titanic_train.csv", stringsAsFactors=False)
test <- read.csv("./R_Data/titanic_test.csv", stringsAsFactors=False)
sub <- read.csv("./R_Data/sample_submission.csv", stringsAsFactors=False)
dim(train); dim(test); dim(sub)
train <-  read.csv("./R_Data/titanic_train.csv", stringsAsFactors=F)
test <- read.csv("./R_Data/titanic_test.csv", stringsAsFactors=F)
sub <- read.csv("./R_Data/sample_submission.csv", stringsAsFactors=F)
dim(train); dim(test); dim(sub)
train <-  read.csv("./R_Data/titanic_train.csv", stringsAsFactors=F)
test <- read.csv("./R_Data/titanic_test.csv", stringsAsFactors=F)
sub <- read.csv("./R_Data/sample_submission.csv", stringsAsFactors=F)
dim(train); dim(test); dim(sub)
### 02 데이터 탐색
* 학습 데이터에 Survived 있음.
* 테스트 데이터에 Survived가 없음.
```{r}
names(train)
cat("\n")
names(test)
cat("\n")
names(sub)
cat("\n")
str(train)
```
### 03 데이터 결측치 확인 및 처리
* train에 Age
* test에 Age와 Fare
```{r}
# library(Amelia)
missmap(train)
missmap(test)
# library(Amelia)
missmap(train)
missmap(test)
```{r}
sum(is.na(train))
sum(is.na(test))
colSums(is.na(train))
colSums(is.na(test))
library(ggplot2)
par(mfrow=c(1,2))
boxplot(train$Age)
boxplot(test$Age)
quantile(train$Age); quantile(test$Age)
quantile(train$Age, na.r=T); quantile(test$Age, na.r=T)
train[ is.na(train$Age), ]
len(train[ is.na(train$Age), ])
length(train[ is.na(train$Age), ])
length(train[ is.na(train$Age), ])
nrows(train[ is.na(train$Age), ])
train[ is.na(train$Age), ]
count( train[ is.na(train$Age), ] )
train[ is.na(train$Age), ]
nrow( train[ is.na(train$Age), ] )
nrow( train[ is.na(train$Age), ] )
train[ is.na(train$Age), 'Age'] = median(train$Age, na.rm=T)
nrow( test[ is.na(test$Age), ] )
test[ is.na(test$Age), 'Age'] = median(test$Age, na.rm=T)
nrow( train[ is.na(train$Age), ] ); nrow( test[ is.na(test$Age), ] )
par(mfrow=c(1,2))
barplot(train$Embarked)
str(train)
train$Embarked <- as.factor(train$Embarked)
barplot(train$Embarked)
cnt_tr <- table(train$Embarked)
cnt_test <- table(test$Embarked)
cnt_tr; cnt_test
cnt_tr <- table(train$Embarked)
cnt_test <- table(test$Embarked)
cnt_tr; cnt_test
par(mfrow=c(1,2))
barplot(cnt_tr)
barplot(cnt_test)
ggplot(data=train, aes(x=Embarked, fill=Survived)) + geom_bar()
ggplot(data=train, aes(x=Embarked, fill=Survived)) + geom_bar(position='fill')
ggplot(data=train, aes(x=Embarked, fill=Survived)) + geom_col()
ggplot(data=train, aes(x=Embarked)) + geom_bar()
ggplot(data=test, aes(x=Embarked)) + geom_bar()
ggplot(data=train, aes(x=Embarked)) + geom_bar()
## 학습용 데이터 처리
nrow( train[ is.na(train$Embarked), ] )
## 테스트용 데이터 처리
nrow( test[ is.na(test$Embarked), ] )
nrow( is.null(train$Age) )
sum( is.null(train$Age) )
sum( is.NA(train$Age) )
sum( is.na(train$Age) )
sum( is.nan(train$Age) )
sum( is.nan(train$Embarked) )
sum( is.na(train$Embarked) )
sum( is.null(train$Embarked) )
ggplot(data=train, aes(x=Embarked)) + geom_bar()
ggplot(data=test, aes(x=Embarked)) + geom_bar()
cnt_tr; cnt_test
train <-  read.csv("./R_Data/titanic_train.csv", stringsAsFactors=F, na.strings = c("NA", ""))
cnt_tr <- table(train$Embarked)
cnt_test <- table(test$Embarked)
cnt_tr; cnt_test
# train <-  read.csv("./R_Data/titanic_train.csv", stringsAsFactors=F, na.strings = c("NA", ""))
train <-  read.csv("./R_Data/titanic_train.csv", stringsAsFactors=F)
cnt_tr <- table(train$Embarked)
cnt_test <- table(test$Embarked)
cnt_tr; cnt_test
colSums(is.na(train))
colSums(is.na(test))
dim(train); dim(test); dim(sub)
168
cnt_tr <- table(train$Embarked)
cnt_test <- table(test$Embarked)
cnt_tr; cnt_test
par(mfrow=c(1,2))
barplot(cnt_tr)
barplot(cnt_test)
ggplot(data=train, aes(x=Embarked)) + geom_bar()
ggplot(data=test, aes(x=Embarked)) + geom_bar()
168
168 +77 + 644
168 + 77 + 644
# train <-  read.csv("./R_Data/titanic_train.csv", stringsAsFactors=F, na.strings = c("NA", ""))
train <-  read.csv("./R_Data/titanic_train.csv", stringsAsFactors=F, na.strings = c("NA", ""))
train <-  read.csv("./R_Data/titanic_train.csv", stringsAsFactors=F, na.strings = c("NA", ""))
# library(Amelia)
missmap(train)
missmap(test)
# library(Amelia)
missmap(train)
missmap(test)
# library(Amelia)
missmap(train)
missmap(test)
train <-  read.csv("./R_Data/titanic_train.csv", stringsAsFactors=F, na.strings = c("", "NA"))
# train <-  read.csv("./R_Data/titanic_train.csv", stringsAsFactors=F)
test <- read.csv("./R_Data/titanic_test.csv", stringsAsFactors=F)
sub <- read.csv("./R_Data/sample_submission.csv", stringsAsFactors=F)
# library(Amelia)
missmap(train)
missmap(test)
# library(Amelia)
missmap(train)
missmap(test)
colSums(is.na(train))
colSums(is.na(test))
test <- read.csv("./R_Data/titanic_test.csv", stringsAsFactors=F, na.strings = c("", "NA"))
# library(Amelia)
missmap(train)
missmap(test)
colSums(is.na(train))
colSums(is.na(test))
library(Amelia)
library(ggplot2)
train <-  read.csv("./R_Data/titanic_train.csv", stringsAsFactors=F, na.strings = c("", "NA"))
test <- read.csv("./R_Data/titanic_test.csv", stringsAsFactors=F, na.strings = c("", "NA"))
# train <-  read.csv("./R_Data/titanic_train.csv", stringsAsFactors=F)
# test <- read.csv("./R_Data/titanic_test.csv", stringsAsFactors=F)
sub <- read.csv("./R_Data/sample_submission.csv", stringsAsFactors=F)
dim(train); dim(test); dim(sub)
names(train)
cat("\n")
names(test)
cat("\n")
names(sub)
cat("\n")
str(train)
# library(Amelia)
missmap(train)
missmap(test)
colSums(is.na(train))
colSums(is.na(test))
par(mfrow=c(1,2))
boxplot(train$Age)
boxplot(test$Age)
quantile(train$Age, na.r=T); quantile(test$Age, na.r=T)
## 학습용 데이터 처리
nrow( train[ is.na(train$Age), ] )
train[ is.na(train$Age), 'Age'] = median(train$Age, na.rm=T)
## 테스트용 데이터 처리
nrow( test[ is.na(test$Age), ] )
test[ is.na(test$Age), 'Age'] = median(test$Age, na.rm=T)
## 확인
nrow( train[ is.na(train$Age), ] ); nrow( test[ is.na(test$Age), ] )
168 + 77 + 644
cnt_tr <- table(train$Embarked)
cnt_test <- table(test$Embarked)
cnt_tr; cnt_test
par(mfrow=c(1,2))
barplot(cnt_tr)
barplot(cnt_test)
ggplot(data=train, aes(x=Embarked)) + geom_bar()
ggplot(data=test, aes(x=Embarked)) + geom_bar()
cnt_tr <- table(train$Embarked, useNA='always')
cnt_test <- table(test$Embarked, useNA='always')
cnt_tr; cnt_test
par(mfrow=c(1,2))
barplot(cnt_tr)
barplot(cnt_test)
ggplot(data=train, aes(x=Embarked)) + geom_bar()
ggplot(data=train, aes(x=Embarked)) + geom_bar()
ggplot(data=test, aes(x=Embarked)) + geom_bar()
## 학습용 데이터 처리
nrow( train[ is.na(train$Embarked), ] )
train[ is.na(train$Age), 'Age'] = median(train$Age, na.rm=T)
## 테스트용 데이터 처리
nrow( test[ is.na(test$Embarked), ] )
test[ is.na(test$Age), 'Age'] = median(test$Age, na.rm=T)
sum( is.null(train$Embarked) )
## 학습용 데이터 처리
nrow( train[ is.na(train$Embarked), ] )
train[ is.na(train$Age), 'Age'] = median(train$Age, na.rm=T)
## 테스트용 데이터 처리
nrow( test[ is.na(test$Embarked), ] )
test[ is.na(test$Age), 'Age'] = median(test$Age, na.rm=T)
train[ is.na(train$Embarked), 'Embarked'] = 'S'
nrow( train[ is.na(train$Embarked), ] )
colSums(is.na(train))
colSums(is.na(test))
colSums(is.na(train))
colSums(is.na(test))
m <- glm(Survived ~ Pclass + Age + SibSp, family=binomial, data=train)
summar(m)
m <- glm(Survived ~ Pclass + Age + SibSp, family=binomial, data=train)
summary(m)
pred <- predict(m, newdata=test, type = "response")
pred[0:10]
pred <- as.integer(pred > 0.5)
pred[0:10]
pred <- predict(m, newdata=test, type = "response")
pred[0:15]
pred <- as.integer(pred > 0.5)
pred[0:15]
sub
sub
sub[ ,'Survived'] = pred
sub
sub[ ,'Survived'] = pred
sub[0:15]
sub[ ,'Survived'] = pred
sub[0:15]
sub[,0:15]
sub[0:15,]
write.csv("firstSub.csv", col.names = F)
list.files(path=".", pattern=NULL)
getwd()
write.csv("./firstSub.csv", col.names = F)
list.files(path=".", pattern=NULL)
getwd()
write.csv("./firstSub.csv", col.names = F)
write.csv(sub, file="./firstSub.csv", col.names = F)
list.files(path=".", pattern=NULL)
write.csv(sub, file="firstSub.csv", col.names = F)
list.files(path=".", pattern=NULL)
write.csv(sub, file="firstSub.csv", col.names = F)
write.csv(sub, file="firstSub.csv", row.names = F)
list.files(path=".", pattern=NULL)

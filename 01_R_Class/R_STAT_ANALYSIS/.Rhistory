# library(caret)
pred <- as.factor(pred)
actual <- as.factor(actual)
confusionMatrix(pred, actual)
actual <- train_test[ ,"Survived"]
xt = xtabs(~ pred + actual)
xt
# library(caret)
pred <- as.factor(pred)
actual <- as.factor(actual)
confusionMatrix(pred, actual)
m <- rpart(Survived ~., family=binomial, data=train_tr)
summary(m)
pred <- predict(m2, newdata=train_test, type = "class")
m2 <- rpart(Survived ~., family=binomial, data=train_tr)
m2 <- rpart(Survived ~., family=binomial, data=train_tr)
m2 <- rpart(Survived ~., family=binomial, data=train_tr)
library(rpart)
m2 <- rpart(Survived ~., family=binomial, data=train_tr)
# library(rpart)
m2 <- rpart(Survived ~., family=binomial, data=train_tr)
# library(rpart)
m2 <- rpart(Survived ~., data=train_tr)
summary(m2)
pred <- predict(m2, newdata=train_test, type = "class")
pred <- predict(m2, newdata=train_test, type = "class")
# library(rpart)
m2 <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Embarked + PclassSex, data=train_tr)
summary(m2)
# library(rpart)
m2 <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Embarked + PclassSex, data=train_tr)
summary(m2)
pred <- predict(m2, newdata=train_test, type = "class")
pred <- predict(m2, newdata=train_test, type = "prop")
pred[0:15]
length(pred)
pred <- predict(m2, newdata=train_test, type = "prop")
pred <- predict(m2, newdata=train_test, type="prop")
pred[0:15]
length(pred)
rpart_pred <- predict(m2, newdata=train_test, type="prop")
rpart_pred <- predict(m2, newdata=train_test, type=c("class"))
library(randomForest)
# library(rpart)
m2 <- randomForest(Survived ~ ., data=train_tr)
# library(rpart)
m2 <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Embarked + PclassSex, data=train_tr)
colSums(is.na(all))
str(train_tr)
str(all)
train <-  read.csv("./R_Data/titanic_train.csv", stringsAsFactors=F, na.strings = c("", "NA"))
test <- read.csv("./R_Data/titanic_test.csv", stringsAsFactors=F, na.strings = c("", "NA"))
test$Survived <- NA
all <- rbind(train, test)
colSums(is.na(all))
all$Sex <- as.factor(all$Sex)
all$Survived <- as.factor(all$Survived)
all$Pclass <- as.ordered(all$Pclass)
str(all)
all$PclassSex[all$Pclass=='1' & all$Sex=='male'] <- 'P1Male'
all$PclassSex[all$Pclass=='2' & all$Sex=='male'] <- 'P2Male'
all$PclassSex[all$Pclass=='3' & all$Sex=='male'] <- 'P3Male'
all$PclassSex[all$Pclass=='1' & all$Sex=='female'] <- 'P1Female'
all$PclassSex[all$Pclass=='2' & all$Sex=='female'] <- 'P2Female'
all$PclassSex[all$Pclass=='3' & all$Sex=='female'] <- 'P3Female'
all$PclassSex <- as.factor(all$PclassSex)
names(all); table(all$PclassSex)
all[is.na(all$Fare), ]
all[is.na(all$Embarked), ]
names(all)
str(all)
all %>% group_by(PclassSex) %>% summarise(n=n(),
mean_age=mean(Age, na.rm=T),
median_age=median(Age, na.rm=T))
all[ is.na(all$Embarked), 'Embarked'] = 'S'
all[ is.na(all$Fare), 'Fare'] = median(all$Fare,na.rm=T)
all[ is.na(all$Age) & all$PclassSex=="P1Female", 'Age'] = 36
all[ is.na(all$Age) & all$PclassSex=="P1Male", 'Age'] = 42
all[ is.na(all$Age) & all$PclassSex=="P2Female", 'Age'] = 28
all[ is.na(all$Age) & all$PclassSex=="P2Male", 'Age'] = 29.5
all[ is.na(all$Age) & all$PclassSex=="P3Female", 'Age'] = 22
all[ is.na(all$Age) & all$PclassSex=="P3Male", 'Age'] = 25
colSums(is.na(all))
trainClean <- all[!is.na(all$Survived),]
testClean <- all[is.na(all$Survived),]
nrow(trainClean); nrow(testClean);
idx <- sample(1:nrow(trainClean), size=nrow(trainClean)*0.7, replace=F)
train_tr <- trainClean[idx, ]
train_test <- trainClean[-idx, ]
m <- glm(Survived ~ Pclass + Sex + Age + SibSp + Embarked + PclassSex, family=binomial, data=train_tr)
summary(m)
pred <- predict(m, newdata=train_test, type = "response")
pred[0:15]
pred <- as.integer(pred > 0.5)
pred[0:15]
length(pred)
actual <- train_test[ ,"Survived"]
xt = xtabs(~ pred + actual)
xt
# library(caret)
pred <- as.factor(pred)
actual <- as.factor(actual)
confusionMatrix(pred, actual)
str(train_tr)
# library(randomForest)
m2 <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Embarked + PclassSex, data=train_tr)
# library(randomForest)
m2 <- randomForest(Survived ~ Pclass + Sex + SibSp + Embarked + PclassSex, data=train_tr)
# library(randomForest)
m2 <- randomForest(Survived ~ Pclass + Sex + PclassSex, data=train_tr)
summary(m2)
rf_pred <- predict(m2, newdata=train_test, type=c("class"))
rf_pred[0:15]
length(pred)
# library(caret)
actual <- train_test[ ,"Survived"]
pred <- as.factor(rf_pred)
actual <- as.factor(actual)
confusionMatrix(pred, actual)
# library(randomForest)
m2 <- randomForest(Survived ~ Pclass + Sex + PclassSex + SibSp, data=train_tr)
summary(m2)
rf_pred <- predict(m2, newdata=train_test, type=c("class"))
rf_pred[0:15]
length(pred)
# library(caret)
actual <- train_test[ ,"Survived"]
pred <- as.factor(rf_pred)
actual <- as.factor(actual)
confusionMatrix(pred, actual)
# library(randomForest)
m2 <- randomForest(Survived ~ Pclass + Sex + PclassSex + SibSp + Age, data=train_tr)
summary(m2)
rf_pred <- predict(m2, newdata=train_test, type=c("class"))
rf_pred[0:15]
length(pred)
# library(caret)
actual <- train_test[ ,"Survived"]
pred <- as.factor(rf_pred)
actual <- as.factor(actual)
confusionMatrix(pred, actual)
# library(randomForest)
m2 <- randomForest(Survived ~ Pclass + Sex + PclassSex + SibSp + Age + Fare, data=train_tr)
summary(m2)
rf_pred <- predict(m2, newdata=train_test, type=c("class"))
rf_pred[0:15]
length(pred)
# library(caret)
actual <- train_test[ ,"Survived"]
pred <- as.factor(rf_pred)
actual <- as.factor(actual)
confusionMatrix(pred, actual)
# library(randomForest)
m2 <- randomForest(Survived ~ Pclass + Sex + PclassSex + SibSp + Age + Fare + Embarked + Parch, data=train_tr)
# library(randomForest)
m2 <- randomForest(Survived ~ Pclass + Sex + PclassSex + SibSp + Age + Fare + Embarked, data=train_tr)
# library(randomForest)
m2 <- randomForest(Survived ~ Pclass + Sex + PclassSex + SibSp + Age + Fare, data=train_tr)
summary(m2)
colSums(is.na(all))
trainClean <- all[!is.na(all$Survived),]
testClean <- all[is.na(all$Survived),]
nrow(trainClean); nrow(testClean);
idx <- sample(1:nrow(trainClean), size=nrow(trainClean)*0.7, replace=F)
train_tr <- trainClean[idx, ]
train_test <- trainClean[-idx, ]
m <- glm(Survived ~ Pclass + Sex + Age + SibSp + Embarked + PclassSex, family=binomial, data=train_tr)
summary(m)
pred <- predict(m, newdata=train_test, type = "response")
pred[0:15]
pred <- as.integer(pred > 0.5)
pred[0:15]
length(pred)
actual <- train_test[ ,"Survived"]
xt = xtabs(~ pred + actual)
xt
# library(caret)
pred <- as.factor(pred)
actual <- as.factor(actual)
confusionMatrix(pred, actual)
str(train_tr)
all$Embarked <- as.factor(all$Embarked)
all$Embarked <- as.factor(all$Embarked)
trainClean <- all[!is.na(all$Survived),]
testClean <- all[is.na(all$Survived),]
nrow(trainClean); nrow(testClean);
idx <- sample(1:nrow(trainClean), size=nrow(trainClean)*0.7, replace=F)
train_tr <- trainClean[idx, ]
train_test <- trainClean[-idx, ]
m <- glm(Survived ~ Pclass + Sex + Age + SibSp + Embarked + PclassSex, family=binomial, data=train_tr)
summary(m)
pred <- predict(m, newdata=train_test, type = "response")
pred[0:15]
pred <- as.integer(pred > 0.5)
pred[0:15]
length(pred)
actual <- train_test[ ,"Survived"]
xt = xtabs(~ pred + actual)
xt
# library(caret)
pred <- as.factor(pred)
actual <- as.factor(actual)
confusionMatrix(pred, actual)
str(train_tr)
# library(randomForest)
m2 <- randomForest(Survived ~ Pclass + Sex + PclassSex + SibSp + Age + Fare, data=train_tr)
summary(m2)
# library(randomForest)
m2 <- randomForest(Survived ~ Pclass + Sex + PclassSex + SibSp + Age + Fare + Embarked, data=train_tr)
summary(m2)
rf_pred <- predict(m2, newdata=train_test, type=c("class"))
rf_pred[0:15]
length(pred)
rf_pred <- predict(m2, newdata=train_test, type=c("class"))
rf_pred[0:15]
rf_pred <- predict(m2, newdata=train_test, type=c("prob"))
rf_pred[0:15]
length(pred)
# library(caret)
actual <- train_test[ ,"Survived"]
pred <- as.factor(rf_pred)
actual <- as.factor(actual)
confusionMatrix(pred, actual)
rf_pred <- predict(m2, newdata=train_test, type=c("prob"))
rf_pred[0:15]
rf_pred <- predict(m2, newdata=train_test, type=c("class"))
rf_pred[0:15]
length(pred)
# library(caret)
actual <- train_test[ ,"Survived"]
pred <- as.factor(rf_pred)
actual <- as.factor(actual)
confusionMatrix(pred, actual)
pred <- predict(m2, newdata=testClean, type = "response")
pred[0:15]
pred <- as.integer(pred > 0.5)
pred[0:15]
len(pred)
pred <- predict(m2, newdata=testClean, type="response")
pred[0:15]
pred <- predict(m2, newdata=testClean, type="prob")
pred[0:15]
pred <- as.integer(pred > 0.5)
pred[0:15]
len(pred)
pred <- predict(m2, newdata=testClean, type="prob")
pred[0:15]
pred <- as.integer(pred > 0.5)
pred[0:15]
length(pred)
sub[ ,'Survived'] = pred
train <-  read.csv("./R_Data/titanic_train.csv", stringsAsFactors=F, na.strings = c("", "NA"))
test <- read.csv("./R_Data/titanic_test.csv", stringsAsFactors=F, na.strings = c("", "NA"))
sub <- read.csv("./R_Data/sample_submission.csv", stringsAsFactors=F)
test$Survived <- NA
all <- rbind(train, test)
colSums(is.na(all))
test$Survived <- NA
all <- rbind(train, test)
colSums(is.na(all))
all$Sex <- as.factor(all$Sex)
all$Survived <- as.factor(all$Survived)
all$Pclass <- as.ordered(all$Pclass)
str(all)
all$PclassSex[all$Pclass=='1' & all$Sex=='male'] <- 'P1Male'
all$PclassSex[all$Pclass=='2' & all$Sex=='male'] <- 'P2Male'
all$PclassSex[all$Pclass=='3' & all$Sex=='male'] <- 'P3Male'
all$PclassSex[all$Pclass=='1' & all$Sex=='female'] <- 'P1Female'
all$PclassSex[all$Pclass=='2' & all$Sex=='female'] <- 'P2Female'
all$PclassSex[all$Pclass=='3' & all$Sex=='female'] <- 'P3Female'
all$PclassSex <- as.factor(all$PclassSex)
names(all); table(all$PclassSex)
all[is.na(all$Fare), ]
all[is.na(all$Embarked), ]
names(all)
str(all)
all %>% group_by(PclassSex) %>% summarise(n=n(),
mean_age=mean(Age, na.rm=T),
median_age=median(Age, na.rm=T))
all[ is.na(all$Embarked), 'Embarked'] = 'S'
all[ is.na(all$Fare), 'Fare'] = median(all$Fare,na.rm=T)
all[ is.na(all$Age) & all$PclassSex=="P1Female", 'Age'] = 36
all[ is.na(all$Age) & all$PclassSex=="P1Male", 'Age'] = 42
all[ is.na(all$Age) & all$PclassSex=="P2Female", 'Age'] = 28
all[ is.na(all$Age) & all$PclassSex=="P2Male", 'Age'] = 29.5
all[ is.na(all$Age) & all$PclassSex=="P3Female", 'Age'] = 22
all[ is.na(all$Age) & all$PclassSex=="P3Male", 'Age'] = 25
colSums(is.na(all))
all$Embarked <- as.factor(all$Embarked)
trainClean <- all[!is.na(all$Survived),]
testClean <- all[is.na(all$Survived),]
nrow(trainClean); nrow(testClean);
idx <- sample(1:nrow(trainClean), size=nrow(trainClean)*0.7, replace=F)
train_tr <- trainClean[idx, ]
train_test <- trainClean[-idx, ]
m <- glm(Survived ~ Pclass + Sex + Age + SibSp + Embarked + PclassSex, family=binomial, data=train_tr)
summary(m)
pred <- predict(m, newdata=train_test, type = "response")
pred[0:15]
pred <- as.integer(pred > 0.5)
pred[0:15]
length(pred)
actual <- train_test[ ,"Survived"]
xt = xtabs(~ pred + actual)
xt
# library(caret)
pred <- as.factor(pred)
actual <- as.factor(actual)
confusionMatrix(pred, actual)
str(train_tr)
# library(randomForest)
m2 <- randomForest(Survived ~ Pclass + Sex + PclassSex + SibSp + Age + Fare + Embarked, data=train_tr)
summary(m2)
rf_pred <- predict(m2, newdata=train_test, type=c("prob"))
rf_pred[0:15]
rf_pred <- predict(m2, newdata=train_test, type=c("class"))
rf_pred[0:15]
length(pred)
# library(caret)
actual <- train_test[ ,"Survived"]
pred <- as.factor(rf_pred)
actual <- as.factor(actual)
confusionMatrix(pred, actual)
pred <- predict(m2, newdata=testClean, type="prob")
pred[0:15]
pred <- as.integer(pred > 0.5)
pred[0:15]
length(pred)
pred <- predict(m2, newdata=testClean, type="prob")
pred[0:15]
pred <- as.integer(pred > 0.5)
pred[0:15]
length(pred)
sub[ ,'Survived'] = pred
library(dplyr)
library(caret)
library(rpart)
library(randomForest)
set.seed(1004)
train <-  read.csv("./R_Data/titanic_train.csv", stringsAsFactors=F, na.strings = c("", "NA"))
test <- read.csv("./R_Data/titanic_test.csv", stringsAsFactors=F, na.strings = c("", "NA"))
sub <- read.csv("./R_Data/sample_submission.csv", stringsAsFactors=F)
test$Survived <- NA
all <- rbind(train, test)
colSums(is.na(all))
all$Sex <- as.factor(all$Sex)
all$Survived <- as.factor(all$Survived)
all$Pclass <- as.ordered(all$Pclass)
str(all)
all$PclassSex[all$Pclass=='1' & all$Sex=='male'] <- 'P1Male'
all$PclassSex[all$Pclass=='2' & all$Sex=='male'] <- 'P2Male'
all$PclassSex[all$Pclass=='3' & all$Sex=='male'] <- 'P3Male'
all$PclassSex[all$Pclass=='1' & all$Sex=='female'] <- 'P1Female'
all$PclassSex[all$Pclass=='2' & all$Sex=='female'] <- 'P2Female'
all$PclassSex[all$Pclass=='3' & all$Sex=='female'] <- 'P3Female'
all$PclassSex <- as.factor(all$PclassSex)
names(all); table(all$PclassSex)
all[is.na(all$Fare), ]
all[is.na(all$Embarked), ]
names(all)
str(all)
all %>% group_by(PclassSex) %>% summarise(n=n(),
mean_age=mean(Age, na.rm=T),
median_age=median(Age, na.rm=T))
all[ is.na(all$Embarked), 'Embarked'] = 'S'
all[ is.na(all$Fare), 'Fare'] = median(all$Fare,na.rm=T)
all[ is.na(all$Age) & all$PclassSex=="P1Female", 'Age'] = 36
all[ is.na(all$Age) & all$PclassSex=="P1Male", 'Age'] = 42
all[ is.na(all$Age) & all$PclassSex=="P2Female", 'Age'] = 28
all[ is.na(all$Age) & all$PclassSex=="P2Male", 'Age'] = 29.5
all[ is.na(all$Age) & all$PclassSex=="P3Female", 'Age'] = 22
all[ is.na(all$Age) & all$PclassSex=="P3Male", 'Age'] = 25
colSums(is.na(all))
all$Embarked <- as.factor(all$Embarked)
trainClean <- all[!is.na(all$Survived),]
testClean <- all[is.na(all$Survived),]
nrow(trainClean); nrow(testClean);
idx <- sample(1:nrow(trainClean), size=nrow(trainClean)*0.7, replace=F)
train_tr <- trainClean[idx, ]
train_test <- trainClean[-idx, ]
m <- glm(Survived ~ Pclass + Sex + Age + SibSp + Embarked + PclassSex, family=binomial, data=train_tr)
summary(m)
pred <- predict(m, newdata=train_test, type = "response")
pred[0:15]
pred <- as.integer(pred > 0.5)
pred[0:15]
length(pred)
actual <- train_test[ ,"Survived"]
xt = xtabs(~ pred + actual)
xt
# library(caret)
pred <- as.factor(pred)
actual <- as.factor(actual)
confusionMatrix(pred, actual)
str(train_tr)
# library(randomForest)
m2 <- randomForest(Survived ~ Pclass + Sex + PclassSex + SibSp + Age + Fare + Embarked, data=train_tr)
summary(m2)
rf_pred <- predict(m2, newdata=train_test, type=c("prob"))
rf_pred[0:15]
rf_pred <- predict(m2, newdata=train_test, type=c("class"))
rf_pred[0:15]
length(pred)
# library(caret)
actual <- train_test[ ,"Survived"]
pred <- as.factor(rf_pred)
actual <- as.factor(actual)
confusionMatrix(pred, actual)
pred <- predict(m2, newdata=testClean, type="prob")
pred[0:15]
pred <- as.integer(pred > 0.5)
pred[0:15]
length(pred)
train <-  read.csv("./R_Data/titanic_train.csv", stringsAsFactors=F, na.strings = c("", "NA"))
test <- read.csv("./R_Data/titanic_test.csv", stringsAsFactors=F, na.strings = c("", "NA"))
sub <- read.csv("./R_Data/sample_submission.csv", stringsAsFactors=F)
test$Survived <- NA
all <- rbind(train, test)
colSums(is.na(all))
all$Sex <- as.factor(all$Sex)
all$Survived <- as.factor(all$Survived)
all$Pclass <- as.ordered(all$Pclass)
str(all)
all$PclassSex[all$Pclass=='1' & all$Sex=='male'] <- 'P1Male'
all$PclassSex[all$Pclass=='2' & all$Sex=='male'] <- 'P2Male'
all$PclassSex[all$Pclass=='3' & all$Sex=='male'] <- 'P3Male'
all$PclassSex[all$Pclass=='1' & all$Sex=='female'] <- 'P1Female'
all$PclassSex[all$Pclass=='2' & all$Sex=='female'] <- 'P2Female'
all$PclassSex[all$Pclass=='3' & all$Sex=='female'] <- 'P3Female'
all$PclassSex <- as.factor(all$PclassSex)
names(all); table(all$PclassSex)
all[is.na(all$Fare), ]
all[is.na(all$Embarked), ]
names(all)
str(all)
all %>% group_by(PclassSex) %>% summarise(n=n(),
mean_age=mean(Age, na.rm=T),
median_age=median(Age, na.rm=T))
all[ is.na(all$Embarked), 'Embarked'] = 'S'
all[ is.na(all$Fare), 'Fare'] = median(all$Fare,na.rm=T)
all[ is.na(all$Age) & all$PclassSex=="P1Female", 'Age'] = 36
all[ is.na(all$Age) & all$PclassSex=="P1Male", 'Age'] = 42
all[ is.na(all$Age) & all$PclassSex=="P2Female", 'Age'] = 28
all[ is.na(all$Age) & all$PclassSex=="P2Male", 'Age'] = 29.5
all[ is.na(all$Age) & all$PclassSex=="P3Female", 'Age'] = 22
all[ is.na(all$Age) & all$PclassSex=="P3Male", 'Age'] = 25
colSums(is.na(all))
all$Embarked <- as.factor(all$Embarked)
trainClean <- all[!is.na(all$Survived),]
testClean <- all[is.na(all$Survived),]
nrow(trainClean); nrow(testClean);
idx <- sample(1:nrow(trainClean), size=nrow(trainClean)*0.7, replace=F)
train_tr <- trainClean[idx, ]
train_test <- trainClean[-idx, ]
m <- glm(Survived ~ Pclass + Sex + Age + SibSp + Embarked + PclassSex, family=binomial, data=train_tr)
summary(m)
pred <- predict(m, newdata=train_test, type = "response")
pred[0:15]
pred <- as.integer(pred > 0.5)
pred[0:15]
length(pred)
actual <- train_test[ ,"Survived"]
xt = xtabs(~ pred + actual)
xt
# library(caret)
pred <- as.factor(pred)
actual <- as.factor(actual)
confusionMatrix(pred, actual)
# library(randomForest)
m2 <- randomForest(Survived ~ Pclass + Sex + PclassSex + SibSp + Age + Fare + Embarked, data=train_tr)
summary(m2)
rf_pred <- predict(m2, newdata=train_test, type=c("prob"))
rf_pred[0:15]
rf_pred <- predict(m2, newdata=train_test, type=c("class"))
rf_pred[0:15]
length(pred)
# library(caret)
actual <- train_test[ ,"Survived"]
pred <- as.factor(rf_pred)
actual <- as.factor(actual)
confusionMatrix(pred, actual)
pred <- predict(m2, newdata=testClean, type="prob")
pred[0:15]
length(pred)
nrow(testClean)
pred <- predict(m2, newdata=testClean, type="prob")
pred[0:15]
length(pred)
pred <- predict(m2, newdata=testClean, type="prob")
length(pred)
pred[0:15]
length(pred)
testClean
pred <- predict(m2, newdata=testClean, type="prob")
pred
pred[0:15]
pred
pred[0:15][1]
pred[0:15]
pred[0:15,1]
pred[0:15,2]
length(pred[,2])
pred[,2
pred[,2]
length(pred[,2])
pred[,2]
pred <- as.integer(pred[,2] > 0.5)
length(pred)
sub[ ,'Survived'] = pred
sub[0:15,]
write.csv(sub, file="SecondSub.csv", row.names = F)
list.files(path=".", pattern=NULL)
